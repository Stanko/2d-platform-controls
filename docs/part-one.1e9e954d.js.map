{"mappings":"AAaA,MAAMA,eAAyB,IAAO,GAKhCC,MAAgB,EAEhBC,aAAuB,EACvBC,aAAuB,EACvBC,SAAmB,EAEnBC,SAAmB,CACvBC,EAAG,EACHC,EAAG,GAGCC,SAAmB,CACvBF,EAAG,EACHC,EAAG,GAGCE,eAAiB,GACjBC,MAAe,GACrB,IAAIC,WAGJ,MAAMC,cAAgBC,SAASC,cAAc,WACvCC,cAAgBF,SAASC,cAAc,WACvCE,aAAeH,SAASC,cAAc,UAE5C,SAASG,SAEPL,cAAcM,UAAY,aAAaC,KAAKC,UAAUZ,cACtDI,cAAcM,WAAa,aAAaC,KAAKC,UAAUf,YAGvDU,cAAcM,MAAMC,UAAY,aAC9Bd,SAASF,SACHE,SAASD,OAGnB,SAASgB,cACP,IAAIC,EAAoB,GAExB,IAAK,IAAIC,EAAI,EAAGA,EAAIf,MAAMgB,OAAQD,IAAK,CACrC,MAAME,EAAQjB,MAAMe,IACdnB,EAAEA,EAACC,EAAEA,GAAMoB,EAAMnB,SAEvBgB,GAAa,yEAGKG,EAAMC,wCACGtB,QAAQC,wBAIrCS,aAAaE,UAAYM,EAI3B,MAAMK,WAAsC,GAEtCC,KAAO,CACXC,MAAO,IACPC,KAAM,YACNC,MAAO,aACPC,GAAI,UACJC,KAAM,aAYR,SAASC,IAAIC,EAAeC,EAAaC,GACvC,OAAIF,EAAQC,GACV3B,WAAa,SACN2B,GAGLD,EAAQE,GACV5B,WAAa,SACN4B,GAGFF,EAGT,SAASG,yBAAyBC,GAChC,MAAMC,EAAgBb,WAAWC,KAAKE,MAChCW,EAAiBd,WAAWC,KAAKG,OAEjCW,EAAoBF,IAAkBC,EACtCE,EAAqBF,IAAmBD,EAExCI,EAAgBzC,SAASC,EAAI,EAC7ByC,EAAe1C,SAASC,EAAI,EAElCK,WAAa,SAGTiC,GACFjC,WAAa,OAEXN,SAASC,GADPwC,EApGqB,EAqGML,EAtGN,EAwGMA,GAEtBI,GACTlC,WAAa,OAEXN,SAASC,GADPyC,EA3GqB,EA4GMN,EA7GN,EA+GMA,IAI/B9B,WAAa,MAETmC,GACFzC,SAASC,GArHc,EAqHMmC,EAGzBpC,SAASC,EAAI,IACfD,SAASC,EAAI,IAENyC,IACT1C,SAASC,GA5Hc,EA4HMmC,EAGzBpC,SAASC,EAAI,IACfD,SAASC,EAAI,KAMnBD,SAASC,EAAI8B,IAAI/B,SAASC,GArIH,EAAA,GAuIvBE,SAASF,EAAIE,SAASF,EAAID,SAASC,EAGrC,SAAS0C,cACP,MAAMC,EAAOvC,MAAMA,MAAMgB,OAAS,IAGhClB,SAASF,IAAM2C,GAAMzC,SAASF,GAAKE,SAASD,IAAM0C,GAAMzC,SAASD,KAGjEG,MAAMwC,KAAK,CACTtB,MAAOjB,WACPH,SAAU,IACLA,YAIHE,MAAMgB,OA5IS,IA6IjBhB,MAAMyC,QAIR5B,eAhGJ6B,OAAOC,iBAAiB,WAAYC,IAClCzB,WAAWyB,EAAEC,MAAO,KAGtBH,OAAOC,iBAAiB,SAAUC,WACzBzB,WAAWyB,EAAEC,QAgGtB,IAAIC,WAAaC,YAAYC,MAE7B,SAASC,WACP,MAAMD,EAAMD,YAAYC,MAIxBlB,0BAHekB,EAAMF,YAAcxD,gBAInCgD,cAGA/B,SAGAuC,WAAaE,EAGbE,sBAAsBD,UAGxBA","sources":["src/js/part-one.ts"],"sourcesContent":["// ----- Types\ntype Vector = {\n  x: number;\n  y: number;\n};\n\ntype Trail = Array<{\n  color: string;\n  position: Vector;\n}>;\n\n// ----- Constants\n\nconst FRAME_DURATION: number = 1000 / 60;\n\n// ----- Game state\n\n// Game speed\nconst speed: number = 1;\n\nconst acceleration: number = 1 * speed;\nconst deceleration: number = 2 * speed;\nconst maxSpeed: number = 5 * speed;\n\nconst velocity: Vector = {\n  x: 0,\n  y: 0,\n};\n\nconst position: Vector = {\n  x: 0,\n  y: 0,\n};\n\nconst trailMaxLength = 50;\nconst trail: Trail = [];\nlet trailColor;\n\n// Render\nconst statusElement = document.querySelector('.status') as HTMLPreElement;\nconst playerElement = document.querySelector('.player') as HTMLDivElement;\nconst trailElement = document.querySelector('.trail') as HTMLDivElement;\n\nfunction render() {\n  // status\n  statusElement.innerHTML = `position: ${JSON.stringify(position)}\\n`;\n  statusElement.innerHTML += `velocity: ${JSON.stringify(velocity)}`;\n\n  // player\n  playerElement.style.transform = `translate(${\n    position.x\n  }px, ${-position.y}px)`;\n}\n\nfunction renderTrail() {\n  let trailHTML: string = '';\n\n  for (let i = 0; i < trail.length; i++) {\n    const point = trail[i];\n    const { x, y } = point.position;\n\n    trailHTML += `<div \n      class=\"trail-point\" \n      style=\"\n        background: ${point.color};\n        transform: translate(${x}px, ${y}px);\n      \"></div>`;\n  }\n\n  trailElement.innerHTML = trailHTML;\n}\n\n// ----- Keyboard input\nconst activeKeys: Record<string, boolean> = {};\n\nconst keys = {\n  SPACE: ' ',\n  LEFT: 'ArrowLeft',\n  RIGHT: 'ArrowRight',\n  UP: 'ArrowUp',\n  DOWN: 'ArrowDown',\n};\n\nwindow.addEventListener('keydown', (e) => {\n  activeKeys[e.key] = true;\n});\n\nwindow.addEventListener('keyup', (e) => {\n  delete activeKeys[e.key];\n});\n\n// ----- Update\nfunction cap(value: number, min: number, max: number) {\n  if (value < min) {\n    trailColor = 'silver';\n    return min;\n  }\n\n  if (value > max) {\n    trailColor = 'silver';\n    return max;\n  }\n\n  return value;\n}\n\nfunction updateHorizontalMovement(delta: number) {\n  const isLeftPressed = activeKeys[keys.LEFT];\n  const isRightPressed = activeKeys[keys.RIGHT];\n\n  const isExclusivelyLeft = isLeftPressed && !isRightPressed;\n  const isExclusivelyRight = isRightPressed && !isLeftPressed;\n\n  const isMovingRight = velocity.x > 0;\n  const isMovingLeft = velocity.x < 0;\n\n  trailColor = 'silver';\n\n  // Increase velocity while arrows are pressed\n  if (isExclusivelyLeft) {\n    trailColor = 'lime';\n    if (isMovingRight) {\n      velocity.x -= deceleration * delta;\n    } else {\n      velocity.x -= acceleration * delta;\n    }\n  } else if (isExclusivelyRight) {\n    trailColor = 'lime';\n    if (isMovingLeft) {\n      velocity.x += deceleration * delta;\n    } else {\n      velocity.x += acceleration * delta;\n    }\n  } else {\n    // Deaccelerate if both, on no arrows are pressed\n    trailColor = 'red';\n\n    if (isMovingRight) {\n      velocity.x -= deceleration * delta;\n\n      // Don't start moving in the opposite direction\n      if (velocity.x < 0) {\n        velocity.x = 0;\n      }\n    } else if (isMovingLeft) {\n      velocity.x += deceleration * delta;\n\n      // Don't start moving in the opposite direction\n      if (velocity.x > 0) {\n        velocity.x = 0;\n      }\n    }\n  }\n\n  // Cap at maximum speed\n  velocity.x = cap(velocity.x, -maxSpeed, maxSpeed);\n\n  position.x = position.x + velocity.x;\n}\n\nfunction updateTrail() {\n  const last = trail[trail.length - 1];\n\n  const hasMoved =\n    position.x !== last?.position.x || position.y !== last?.position.y;\n\n  if (hasMoved) {\n    trail.push({\n      color: trailColor,\n      position: {\n        ...position,\n      },\n    });\n\n    if (trail.length > trailMaxLength) {\n      trail.shift();\n    }\n\n    // For performance, trail is only rendered when it is changed\n    renderTrail();\n  }\n}\n\n// ----- Game loop\nlet lastUpdate = performance.now();\n\nfunction gameLoop() {\n  const now = performance.now();\n  const delta = (now - lastUpdate) / FRAME_DURATION;\n\n  // Update game state\n  updateHorizontalMovement(delta);\n  updateTrail();\n\n  // Render\n  render();\n\n  // Update time\n  lastUpdate = now;\n\n  // Next frame\n  requestAnimationFrame(gameLoop);\n}\n\ngameLoop();\n"],"names":["FRAME_DURATION","speed","acceleration","deceleration","maxSpeed","velocity","x","y","position","trailMaxLength","trail","trailColor","statusElement","document","querySelector","playerElement","trailElement","render","innerHTML","JSON","stringify","style","transform","renderTrail","trailHTML","i","length","point","color","activeKeys","keys","SPACE","LEFT","RIGHT","UP","DOWN","cap","value","min","max","updateHorizontalMovement","delta","isLeftPressed","isRightPressed","isExclusivelyLeft","isExclusivelyRight","isMovingRight","isMovingLeft","updateTrail","last","push","shift","window","addEventListener","e","key","lastUpdate","performance","now","gameLoop","requestAnimationFrame"],"version":3,"file":"part-one.1e9e954d.js.map"}